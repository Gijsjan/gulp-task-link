// Generated by CoffeeScript 1.6.3
var async, exec, rimraf, util;

async = require('async');

exec = require('child_process').exec;

rimraf = require('rimraf');

util = require('gulp-util');

/*
@function
@param {object} gulp - Instance of gulp.
@param {array} modules - List of names of modules. When you use `npm link some-module`, some-module should be in the array: ["some-module"].
*/


module.exports = function(gulp, modules) {
  gulp.task('link', function(done) {
    var linkModules, removeModules;
    removeModules = function(cb) {
      var modulePaths;
      modulePaths = modules.map(function(module) {
        return "./node_modules/" + module;
      });
      return async.each(modulePaths, rimraf, function(err) {
        return cb();
      });
    };
    linkModules = function(cb) {
      var moduleCommands;
      moduleCommands = modules.map(function(module) {
        util.log("Linked: " + module);
        return "npm link " + module;
      });
      return async.each(moduleCommands, exec, function(err) {
        return cb();
      });
    };
    return async.series([removeModules, linkModules], function(err) {
      if (err != null) {
        return gutil.log(err);
      }
      return done();
    });
  });
  return gulp.task('unlink', function(done) {
    var installModules, unlinkModules;
    unlinkModules = function(cb) {
      var moduleCommands;
      moduleCommands = modules.map(function(module) {
        util.log("Unlinked: " + module);
        return "npm unlink " + module;
      });
      return async.each(moduleCommands, exec, function(err) {
        return cb();
      });
    };
    installModules = function(cb) {
      return exec('npm i', cb);
    };
    return async.series([unlinkModules, installModules], function(err) {
      if (err != null) {
        return gutil.log(err);
      }
      return done();
    });
  });
};
